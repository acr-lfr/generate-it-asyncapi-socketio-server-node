import * as operationIds from './operationIds';
import { SocketJWT } from '@/interfaces/SocketJWT';
{% for path, channel in swagger.channels -%}
{% if channel.publish and _.includes(nodegenRc.helpers.subscribeOpIds, channel.publish.operationId) -%}
import {{ channel.publish.operationId }}ReactHandle from '../reactHandles/{{ ucFirst(channel.publish.operationId) }}ReactHandle';
{% endif -%}
{% endfor %}

// eslint-disable-next-line max-lines-per-function
export default (payload: any[], clientSocket: SocketJWT): void => {
  const routingKey = payload[0];
  const data = payload[1];
  switch (routingKey) {
      {% for path, channel in swagger.channels -%}
      {% if channel.publish and _.includes(nodegenRc.helpers.subscribeOpIds, channel.publish.operationId) -%}
      {% set channelId = _.toUpper(channel.publish.operationId) -%}
    case operationIds.{{ channelId }}: {
      {{ channel.publish.operationId }}ReactHandle(
        routingKey,
        data,
        clientSocket
      );
      break;
    }
      {% endif -%}
      {% endfor -%}
  }
}
